// import * as THREE from "three";
// import { Triangle } from "three";
// // import { Triangle } from 'three';



// // const { Geometry, Vector3, Triangle } = THREE;

// function FillHole(geometry) {
//   const holeVertices = geometry.vertices.filter(
//     (v) => geometry.isVertexRefencedByFaces(v) && !v.visited
//   );

//   let vertex = holeVertices[0];
//   const holeVerticesCount = holeVertices.length;
//   const triangles = [];
//   let visitedTrianglesCount = 0;

//   while (visitedTrianglesCount < holeVerticesCount - 2) {
//     const [triangle, index] = getFirstTriangleWithVertex(vertex);
//     visitedTrianglesCount++;
//     triangles.push(triangle);

//     const nextVertexIndex = getNextVertexIndex(triangle, index);
//     vertex = geometry.vertices[nextVertexIndex];
//   }

//   const newFaces = [];
//   for (let i = 0; i < triangles.length; i++) {
//     const { a, b, c } = triangles[i];
//     newFaces.push(new THREE.Triangle(a, b, c));
//   }

//   geometry.faces = [...geometry.faces, ...newFaces];
//   geometry.verticesNeedUpdate = true;
//   geometry.computeFaceNormals();

//   function getNextVertexIndex(triangle, currentIndex) {
//     const nextIndex = (currentIndex + 1) % 3;
//     const nextVertexIndex = triangle[nextIndex];
//     const nextVertex = geometry.vertices[nextVertexIndex];

//     return holeVertices.indexOf(nextVertex) === -1 ? triangle[currentIndex] : nextVertexIndex;
//   }

//   function getFirstTriangleWithVertex(vertex) {
//     for (let i = 0; i < geometry.faces.length; i++) {
//       const face = geometry.faces[i];
//       if (!face.visited && face.hasVertex(vertex)) {
//         face.visited = true;
//         return [face, face.getVertexIndex(vertex)];
//       }
//     }
//   }
// }

// export default FillHole;
